<div style="width:60%">
    <input class="easyui-searchbox" data-options="prompt:'请输入图书名称或图书编号或借阅人',searcher:function (name) {
        $('#users_dg').datagrid('load',{name:encodeURIComponent(name)});
    }" style="width:300px;">
    <a href="#" class="easyui-linkbutton" data-options="plain:false,onClick:$.ret.showReturnDialog">归还</a>
</div>
<div style="height: 95%;width: 100%;overflow: hidden">
    <table id="return_dg" style="height: 101%;width: 100%;"></table>
</div>
<div id="return_dlg_confirm" class="easyui-dialog" style="width:100%;max-width:700px;"
     data-options="
                    title: '还书信息',
                    closed: true,
                    modal: true,
                    draggable: false,
                    buttons: [{
                    text: '归还',
                    iconCls: 'icon-ok',
                    handler: $.ret.doReturn
                    }, {
                    text: '取消',
                    iconCls: 'icon-cancel',
                    handler: $.ret.closeConfirmDialog
                    }]
                    ">
    <table id="return_dialog_dg" class="easyui-datagrid" style="width: 99%"
           data-options="
            fitColumns: true,
            singleSelect: false,
            pagination: false">
        <thead>
        <th data-options="field: 'ck', checkbox: true"></th>
        <th data-options="field: 'id', title: 'ID', hidden: true"></th>
        <th data-options="field: 'bcode', title: '图书编号'"></th>
        <th data-options="field: 'bname', title: '图书名称'"></th>
        <th data-options="field: 'uname', title: '借阅人'"></th>
        <th data-options="field: 'borrow_date', title: '借阅日期', formatter: function (val, row) {
        return val ? $.formatDate(val,'yyyy-MM-dd hh:mm') : '';
        }"></th>
        <th data-options="field: 'deadline', title: '应归还日期', formatter: function (val, row) {
        return val ? $.formatDate(val,'yyyy-MM-dd hh:mm') : '';
        }"></th>
        <th data-options="field: 'return_date', title: '实际归还日期', formatter: function (val, row) {
        return val ? $.formatDate(val,'yyyy-MM-dd hh:mm') : '';
        }"></th>
        <th data-options="field: 'delay', title: '逾期天数', formatter: function (val, row) {
         return val>0?val:'未逾期';
        }"></th>
        <th data-options="field: 'status', title: '状态',width:80,formatter:function(value,row){
							return {RETURNED:'归还',OVERDUE:'超期',MISSED:'损毁遗失',BORROWED:'借出'}[value];
						},
						editor:{
							type:'combobox',
							options:{
								valueField:'id',
								textField:'text',
								data:[
								    {
								        id:'RETURNED',
								        text:'归还'
								    },{
								        id:'OVERDUE',
								        text:'超期'
								    },{
								        id:'MISSED',
								        text:'损毁遗失'
								    }
								],
								required:true
							}
						}"></th>
        <th data-options="field: 'null', title: '操作',formatter:function(){return '<a href=\'javascript:void(0)\' onclick=\'javascript:$.ret.removeCurrentRow(this)\'>'+'删除'+'</a>';}"></th>
        </thead>
    </table>
</div>

<script type="text/javascript">
    $(function () {
        $('#return_dg').datagrid({
            url: '/return/list',
            method: 'get',
            iconCls: 'icon-save',
//            width: 700,
//            height: 250,
            fitColumns: true,
            singleSelect: false,
            pagination: true,
//            pageSize: 10,
            columns: [[
                {field: 'ck', checkbox: true},
                {field: 'id', title: 'ID', hidden: true},
                {field: 'bcode', title: '图书编号'},
                {
                    field: 'bname', title: '图书名称'
                },
                {
                    field: 'uname', title: '借阅人'
                },
                {
                    field: 'borrow_date', title: '借阅日期', formatter: function (val, row) {
                    return val ? $.formatDate(val, 'yyyy-MM-dd hh:mm') : '';
                }
                },
                {
                    field: 'deadline', title: '应归还日期', formatter: function (val, row) {
                    return $.formatDate(val, 'yyyy-MM-dd hh:mm')
                }
                },
                {
                    field: 'delay', title: '状态', formatter: function (val, row) {
                    return val > 0 ? '<p style="color: red;">逾期 ' + val + '天</p>' : '<p style="color: green;">剩余' + (-val) + '天</p>';
                }
                }
            ]],
            loadFilter: function (data) {
                if (data.rows) {
                    var a_day = 1000 * 60 * 60 * 24;
                    var current = new Date();
                    $.each(data.rows, function (i, row) {
                        if (row.borrow_date) {
                            row.borrow_date = new Date(row.borrow_date);
                        }
                        if (row.deadline) {
                            row.deadline = new Date(row.deadline);
                        }
                        if (row.deadline < current) {
                            row.status = 'OVERDUE';
                        }
                        if(row.deadline){
                            row.delay = Math.ceil((current.getTime() - row.deadline.getTime()) / a_day);
                        }

                    });
                }
                return data;
            }

        });

        function doReturn() {
            var rows = $('#return_dialog_dg').datagrid('getRows');
            if (!rows || rows.length < 1) {
                $.messager.alert('提示', '请勾选要归还的数目!');
                return;
            }
            $.messager.progress({title: '数据保存中,请稍后...'});
            var return_set = {};
            $.each(rows, function (i, row) {
                return_set[row.id] = row['status'];
            });
            $.ajax({
                url: '/return/return',
                data: return_set,
                type: 'post',
                dataType: 'json',
                data: return_set
            }).done(function (ret) {
                if (ret && ret.flag) {
                    $.messager.alert('提示', '归还成功!');
                    $('#return_dg').datagrid('reload');
                    closeConfirmDialog();
                } else {
                    $.messager.alert('提示', ret, msg || '归还失败!');
                }
            }).fail(function () {
                $.messager.alert('提示', '归还失败!');
            }).always(function () {
                $.messager.progress('close');
            });
        }

        function closeConfirmDialog() {
            $('#return_dlg_confirm').dialog('close');
        }

        function showReturnDialog() {
            var rows = $('#return_dg').datagrid('getChecked');
            if (rows && rows.length) {
                var $dlg = $('#return_dlg_confirm');
                $dlg.dialog('open');
                var date = new Date();
                $.each(rows, function (i, row) {
                    if (row.status != 'OVERDUE') {
                        row.status = 'RETURNED';
                    }
                    row.return_date = date;
                });
                $dlg.find('#return_dialog_dg').datagrid('loadData', {rows: rows});

            } else {
                $.messager.alert('提示', '请勾选要归还的图书');
            }
        }

        function removeCurrentRow(target) {
            var $this = $(target);
            var index = $this.parents('.datagrid-row').first().attr('datagrid-row-index')
            var $dg = $this.parents('.datagrid-view').first().find('.datagrid-f');
            $dg.datagrid('deleteRow', index);
            var rows = $dg.datagrid('getRows');
            if (!rows || rows.length < 1) {
                $.messager.show({
                    title: '提示',
                    msg: '请选择要归还的书目!',
                    timeout: 1500,
                    showType: 'fade'
                });
                $('#return_dlg_confirm').dialog('close');
            } else {
                $dg.datagrid('loadData', {rows: rows});
            }
        }

        $.extend({
            ret: {
                doReturn: doReturn,
                closeConfirmDialog: closeConfirmDialog,
                showReturnDialog: showReturnDialog,
                removeCurrentRow: removeCurrentRow
            }
        });

        $.extend($.fn.datagrid.methods, {
            editCell: function (jq, param) {
                return jq.each(function () {
                    var opts = $(this).datagrid('options');
                    var fields = $(this).datagrid('getColumnFields', true).concat($(this).datagrid('getColumnFields'));
                    for (var i = 0; i < fields.length; i++) {
                        var col = $(this).datagrid('getColumnOption', fields[i]);
                        col.editor1 = col.editor;
                        if (fields[i] != param.field) {
                            col.editor = null;
                        }
                    }
                    $(this).datagrid('beginEdit', param.index);
                    var ed = $(this).datagrid('getEditor', param);
                    if (ed) {
                        if ($(ed.target).hasClass('textbox-f')) {
                            $(ed.target).textbox('textbox').focus();
                        } else {
                            $(ed.target).focus();
                        }
                    }
                    for (var i = 0; i < fields.length; i++) {
                        var col = $(this).datagrid('getColumnOption', fields[i]);
                        col.editor = col.editor1;
                    }
                });
            },
            enableCellEditing: function (jq) {
                return jq.each(function () {
                    var dg = $(this);
                    var opts = dg.datagrid('options');
                    opts.oldOnClickCell = opts.onClickCell;
                    opts.onClickCell = function (index, field) {
                        if (opts.editIndex != undefined) {
                            if (dg.datagrid('validateRow', opts.editIndex)) {
                                dg.datagrid('endEdit', opts.editIndex);
                                opts.editIndex = undefined;
                            } else {
                                return;
                            }
                        }
                        dg.datagrid('selectRow', index).datagrid('editCell', {
                            index: index,
                            field: field
                        });
                        opts.editIndex = index;
                        opts.oldOnClickCell.call(this, index, field);
                    }
                });
            }
        });

        $('#return_dialog_dg').datagrid().datagrid('enableCellEditing');
    });

</script>

